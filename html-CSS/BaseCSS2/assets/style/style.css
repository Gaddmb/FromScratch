:root {
  --color1: #ede4d0;
  --color2: pink;
  --color3: #393b4b;
  --color4: rgb(18, 19, 19);
}

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  background: url(/assets/img/bg.jpg) center/cover;
  height: 100vh;
  font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
  color: var(--color1);
  display: flex;
  align-items: center;
  justify-content: center;
}

.card {
  background: rgba(0, 0, 0, 0.507);
  width: calc(100% - 50px);
  padding: 20px 20px 6px;
  box-shadow: 6px 11px rgba(0, 0, 0, 0.521);
  backdrop-filter: blur(5px);
  border-radius: 10px;
}

.card::before {
  content: "\2730";
  position: absolute;
  top: 14px;
  right: 20px;
  font-size: 2.4rem; /* pour faire grossier mon icone je fais un font-size: rem; */
}

h1 {
  margin-bottom: 24px;
  position: relative; /* l'or d'une position absolute mettre a sont parent la position relative automatiquement  */
}

h1::after {
  content: "";
  position: absolute;
  background: var(--color2);
  height: 1px;
  width: 100%;
  bottom: -14px;
  left: 50%;
  transform: translateX(-50%) scaleX(0); /* j'ai positionne le pseudo-élément à partir du centre horizontal 
  (grâce à translateX(-50%)) et le réduit à une échelle horizontale de 0 
  (scaleX(0)), le rendant invisible au départ. */

  animation: h1anim 6s ease-in-out forwards; /* j'ai applique une animation nommée 'h1anim' qui dure 6 secondes, avec une 
  courbe de vitesse 'ease-in-out' et garde le style final de l'animation (forwards). */

  transform-origin: left; /* j'ai Définit le point d'origine de la transformation à gauche du pseudo-élément. 
  Cela signifie que la transformation de l'échelle se fera à partir du côté gauche. */
}

/* je paramtre l'animation  */
@keyframes h1anim {
  100% {
    transform: translateX(-50%) scaleX(1);
  }
}

/* a noté grid-container a 2 enfants  */
.grid-container {
  display: grid;
  grid-template-columns: 20% 80%;
}

.polygon-container {
  filter: drop-shadow(-1px 6px 3px var(--color2));
  place-self: center; /* Mettre le parent en grid  */
}

.polygon {
  clip-path: polygon(50% 0%, 100% 50%, 50% 100%, 0% 50%);
  background: linear-gradient(135deg, var(--color2) 0%, var(--color3) 100%);
  height: 100px;
  width: 100px;
}

.polygon:after {
  content: "Un texte";
  position: absolute; /* je peux placer mon élément ou je veux  */
  color: var(--color2);
  background: var(--color4);
  /* comment centrer un element */
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%) rotate(344deg);
  width: 90px;
  padding: 4px;
  text-align: center;
}
p {
  line-height: 26px;
  margin: 20px 0;
  display: -webkit-box;
  -webkit-box-orient: vertical;
  -webkit-line-clamp: 4;
  overflow: hidden;
  text-align: justify;
}
p::selection {
  background: var(--color2);
  color: var(--color3);
}

.checkbox-container {
  display: flex;
  justify-content: space-around;
  margin: 20px 0 30px;
  perspective: 50px;
}

/* pour pointer direct une checkbox  */

.checkbox-container input[type="checkbox"] {
  display: none;
}

.checkbox-container input[type="checkbox"]:checked + label /* une fois cliqué le label change de couleur  */ {
  background: var(--color2);
  color: var(--color3);
  transform: scale(1.1);
  filter: brightness(100%);
}

/* toujours mettre une transition sur l'element global et non pas sur l'even */

.checkbox-container label {
  cursor: pointer;
  border: 1px solid var(--color1);
  background: var(var(--color3));
  padding: 10px;
  border-radius: 5px;
  transition: 1.5s;
  filter: blur(1px);
  user-select: none; /* pour ne plus selectionné le texte  */
}

/* je souhaite apporté une animation au 1er label grace au pseudo-element first-of-type  */
label:first-of-type:hover {
  animation: label1 1s infinite linear;
}

@keyframes label1 {
  50% {
    transform: scale(1.4);
  }
  100% {
    transform: scale(1);
  }
}

label:nth-child(4):hover {
  animation: label2 3s infinite linear;
}

@keyframes label2 {
  33% {
    transform: translateZ(30px);
  }
  60% {
    transform: translateZ(-40px);
  }

  100% {
    transform: translateZ(0);
  }
}

.e-mail {
  text-align: center;
  margin-bottom: 20px;
}

.e-mail input {
  padding: 10px;
  border-radius: 5px;
  outline: none;
  border: 3px solid transparent;
  transition: 0.3s;
  text-align: center;
  color: var(--color4);
  min-width: 180px; /* je m'assure que ce n'est pas au dessous d'un certaine taille  */
  width: 30%;
  max-width: 300px; /* et en dessus  */
  transition: 1.5s;
}

/* le focus lorsque un element est selectionné  */
.e-mail input[type="text"]:focus {
  background: transparent;
  border: 3px solid var(--color2);
  border-radius: 150px;
  transition: 1.5s;
}

input[type="text"]::placeholder {
  color: var(--color2);
  font-family: "Gill Sans", "Gill Sans MT", Calibri, "Trebuchet MS", sans-serif;
}

button {
  cursor: pointer;
  background: var(--color2);
  border: none;
  font-size: 1.3rem;
  padding: 10px 20px;
  border-radius: 150px;
  margin: 0 auto;
  /* Pour les mises en page plus complexes ou lorsque plusieurs éléments doivent être alignés ou distribués, display: flex serait plus approprié. */
  display: block; /* ( de base il etait en inline-block )Utilisé pour les boutons avec un seul élément à centrer */
  transition: 0.5s;
}

button:active {
  transform: scale(1.2);
}
button:hover {
  letter-spacing: 3px;
}

/* lorsque je fais un over du btn je veux que le a qui suit est le comportement suivant  */
button:hover + a,
a:hover {
  opacity: 1;
  transform: translateY(0);
  visibility: visible;
}

a {
  color: var(--color2);
  display: block;
  text-align: center;
  opacity: 0;
  transform: translateY(50px);
  transition: 0.9s;
  margin-top: 10px;
  visibility: hidden;
}

/* lorsque le liens a deja etait cliqué  */
a:visited {
  color: var(--color1);
}

img {
  height: 40px;
  position: absolute;
  filter: drop-shadow(0px 6px 3px rgba(255, 255, 0, 0.6));
  z-index: -1;
  animation: spaceship 60s infinite linear; /* la propriété me permet de place mon element plus ou moins devant ou derrier  */
}

@keyframes spaceship {
  0% {
    top: 2%;
    left: 2%;
    transform: rotate(90deg);
  }
  10% {
    top: 6%;
    left: 30%;
    transform: rotate(95deg);
  }
  20% {
    top: 9%;
    left: 60%;
    transform: rotate(60deg);
  }
  30% {
    top: 0%;
    left: 80%;
    transform: rotate(90deg);
  }
  40% {
    top: 20%;
    left: 120%;
    transform: rotate(110deg);
  }
  50% {
    top: 50%;
    left: 80%;
    transform: rotate(323deg);
  }
  60% {
    top: 90%;
    left: 90%;
    transform: rotate(256deg);
  }
  70% {
    top: 110%;
    left: 50%;
    transform: rotate(237deg);
  }
  80% {
    top: 85%;
    left: 30%;
    transform: rotate(323deg);
  }
  90% {
    top: 50%;
    left: 15%;
    transform: rotate(350deg);
  }
  100% {
    top: 2%;
    left: 2%;
    transform: rotate(90deg);
  }
}
