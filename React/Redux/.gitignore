Utilisateur clique ‚ûú Action ‚ûú Reducer ‚ûú Store ‚ûú Composant (UI)


| √âl√©ment             | R√¥le                                                                |
| ------------------- | ------------------------------------------------------------------- |
| **Action**          | Objet qui d√©crit ce qu‚Äôon veut faire (ex: `ADD_POST`, `FETCH_USER`) |
| **Reducer**         | Fonction qui **modifie l‚Äô√©tat** du `store` en fonction de l‚Äôaction  |
| **Store**           | Contient **l‚Äô√©tat global** de l‚Äôapplication                         |
| **Middleware**      | (optionnel) permet de g√©rer l‚Äô**asynchrone** (ex: fetch API)        |
| **Composant React** | Affiche les donn√©es du store et envoie des actions                  |

 Diff√©rence entre Redux classique et Redux Toolkit
üîπ Redux classique (ancienne m√©thode)
N√©cessite beaucoup de boilerplate (code r√©p√©titif)

Doit cr√©er s√©par√©ment :

les actions

les action types

les reducers

un store avec combineReducers

Utilise des switch/case pour g√©rer les actions dans les reducers

Peut devenir difficile √† maintenir dans de gros projets

üî∏ Redux Toolkit (m√©thode moderne, officielle depuis 2020)
Recommand√© par l‚Äô√©quipe Redux

Fournit des fonctions simplifi√©es comme :

configureStore (cr√©ation du store)

createSlice (state + actions + reducers regroup√©s)

DevTools int√©gr√©s automatiquement

Code plus clair, plus court, plus facile √† lire

Moins d‚Äôerreurs possibles gr√¢ce √† l‚Äôautomatisation

Redux Toolkit permet de cr√©er des applications plus rapidement, avec moins de code et de meilleures pratiques.
Redux classique fonctionne toujours, mais n‚Äôest plus recommand√© pour d√©marrer de nouveaux projets.